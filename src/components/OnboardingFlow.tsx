
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { ChevronRight, ChevronLeft, Volume2 } from "lucide-react";
import DuckMascot from "./DuckMascot";

interface OnboardingFlowProps {
  onComplete: () => void;
}

const OnboardingFlow = ({ onComplete }: OnboardingFlowProps) => {
  const [currentStep, setCurrentStep] = useState(0);
  const [selectedLanguage, setSelectedLanguage] = useState("");
  const [selectedGoal, setSelectedGoal] = useState("");
  const [selectedTone, setSelectedTone] = useState("");

  const languages = [
    { code: "hi", name: "‡§π‡§ø‡§Ç‡§¶‡•Ä", emoji: "üáÆüá≥", comment: "‡§®‡§Æ‡§∏‡•ç‡§§‡•á!" },
    { code: "fr", name: "French", emoji: "üá´üá∑", comment: "Oui oui baguette!" },
    { code: "es", name: "Spanish", emoji: "üá™üá∏", comment: "¬°Hola amigo!" },
    { code: "de", name: "German", emoji: "üá©üá™", comment: "Guten Tag!" },
    { code: "it", name: "Italian", emoji: "üáÆüáπ", comment: "Ciao bella!" }
  ];

  const goals = [
    { id: "light", title: "‡§π‡§≤‡•ç‡§ï‡§æ ‡§î‡§∞ ‡§Ü‡§∏‡§æ‡§®", desc: "5 ‡§Æ‡§ø‡§®‡§ü ‡§ï‡•â‡§≤, 3 ‡§¨‡§æ‡§∞/‡§∏‡§™‡•ç‡§§‡§æ‡§π", emoji: "üå∏" },
    { id: "medium", title: "‡§∏‡•ç‡§•‡§ø‡§∞ ‡§™‡•ç‡§∞‡§ó‡§§‡§ø", desc: "10 ‡§Æ‡§ø‡§®‡§ü ‡§ï‡•â‡§≤, ‡§∞‡•ã‡§ú‡§º‡§æ‡§®‡§æ", emoji: "üöÄ" },
    { id: "intense", title: "‡§ó‡•Ç‡§ú‡§º ‡§Æ‡•ã‡§°", desc: "15 ‡§Æ‡§ø‡§®‡§ü ‡§ï‡•â‡§≤, ‡§∞‡•ã‡§ú‡§º‡§æ‡§®‡§æ + ‡§Ö‡§§‡§ø‡§∞‡§ø‡§ï‡•ç‡§§", emoji: "üî•" }
  ];

  const tones = [
    { id: "chaotic", title: "‡§Ö‡§∞‡§æ‡§ú‡§ï", desc: "‡§Ö‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡§æ‡§∂‡§ø‡§§ ‡§î‡§∞ ‡§ú‡§Ç‡§ó‡§≤‡•Ä", emoji: "üå™Ô∏è" },
    { id: "flirty", title: "‡§´‡•ç‡§≤‡§∞‡•ç‡§ü‡•Ä", desc: "‡§ö‡§ø‡§ï‡§®‡§æ ‡§î‡§∞ ‡§Ü‡§ï‡§∞‡•ç‡§∑‡§ï", emoji: "üòò" },
    { id: "calm", title: "‡§∂‡§æ‡§Ç‡§§", desc: "‡§ú‡§º‡•á‡§® ‡§î‡§∞ ‡§∂‡§æ‡§Ç‡§§‡§ø‡§™‡•Ç‡§∞‡•ç‡§£", emoji: "üßò" },
    { id: "strict", title: "‡§∏‡§ñ‡•ç‡§§", desc: "‡§¨‡§ï‡§µ‡§æ‡§∏ ‡§®‡§π‡•Ä‡§Ç ‡§∂‡§ø‡§ï‡•ç‡§∑‡§ï", emoji: "üë©‚Äçüè´" },
    { id: "grandma", title: "‡§®‡§∞‡§Æ ‡§¶‡§æ‡§¶‡•Ä", desc: "‡§Æ‡§ß‡•Å‡§∞ ‡§î‡§∞ ‡§™‡•ç‡§∞‡•ã‡§§‡•ç‡§∏‡§æ‡§π‡§®‡§ï‡§æ‡§∞‡•Ä", emoji: "üëµ" },
    { id: "sadboi", title: "‡§â‡§¶‡§æ‡§∏ ‡§≤‡§°‡§º‡§ï‡§æ", desc: "‡§â‡§¶‡§æ‡§∏‡•Ä‡§® ‡§≤‡•á‡§ï‡§ø‡§® ‡§¨‡•Å‡§¶‡•ç‡§ß‡§ø‡§Æ‡§æ‡§®", emoji: "üòî" }
  ];

  const nextStep = () => {
    if (currentStep < 4) {
      setCurrentStep(currentStep + 1);
    } else {
      onComplete();
    }
  };

  const prevStep = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
    }
  };

  const renderStep = () => {
    switch (currentStep) {
      case 0:
        return (
          <div className="text-center space-y-6">
            <DuckMascot className="mx-auto" />
            <div>
              <h1 className="text-4xl font-bold text-slate-800 mb-4">‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à!</h1>
              <p className="text-xl text-slate-600">‡§ó‡•Ç‡§ú‡§º ‡§§‡§∞‡•Ä‡§ï‡•á ‡§∏‡•á ‡§ß‡§æ‡§∞‡§æ‡§™‡•ç‡§∞‡§µ‡§æ‡§π ‡§¨‡§®‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§π‡•à‡§Ç?</p>
            </div>
            <Button 
              onClick={nextStep}
              className="w-full bg-orange-500 hover:bg-orange-600 text-white font-bold py-4 px-6 rounded-2xl text-xl"
            >
              ‡§ö‡§≤‡•ã ‡§ó‡•Ç‡§ú‡§º ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç! <ChevronRight className="w-5 h-5 ml-2" />
            </Button>
          </div>
        );

      case 1:
        return (
          <div className="space-y-6">
            <div className="text-center">
              <h2 className="text-3xl font-bold text-slate-800 mb-2">‡§Ö‡§™‡§®‡•Ä ‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç</h2>
              <p className="text-slate-600">‡§Ü‡§ú ‡§π‡§Æ ‡§ï‡•å‡§® ‡§∏‡•Ä ‡§≠‡§æ‡§∑‡§æ ‡§Æ‡•á‡§Ç ‡§ó‡•Ç‡§ú‡§º‡§ø‡§Ç‡§ó ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç?</p>
            </div>
            
            <div className="space-y-3">
              {languages.map((lang) => (
                <button
                  key={lang.code}
                  onClick={() => setSelectedLanguage(lang.code)}
                  className={`w-full p-4 rounded-2xl text-left transition-all ${
                    selectedLanguage === lang.code 
                      ? 'bg-orange-500 text-white' 
                      : 'bg-white border-2 border-slate-200 hover:border-orange-300'
                  }`}
                >
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-3">
                      <span className="text-2xl">{lang.emoji}</span>
                      <span className="font-semibold">{lang.name}</span>
                    </div>
                    <span className="text-sm opacity-80">{lang.comment}</span>
                  </div>
                </button>
              ))}
            </div>
          </div>
        );

      case 2:
        return (
          <div className="space-y-6">
            <div className="text-center">
              <h2 className="text-3xl font-bold text-slate-800 mb-2">‡§Ö‡§™‡§®‡§æ ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Ø ‡§®‡§ø‡§∞‡•ç‡§ß‡§æ‡§∞‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç</h2>
              <p className="text-slate-600">‡§π‡§Æ‡•á‡§Ç ‡§ï‡§ø‡§§‡§®‡•Ä ‡§§‡•Ä‡§µ‡•ç‡§∞‡§§‡§æ ‡§∏‡•á ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è?</p>
            </div>
            
            <div className="space-y-3">
              {goals.map((goal) => (
                <button
                  key={goal.id}
                  onClick={() => setSelectedGoal(goal.id)}
                  className={`w-full p-4 rounded-2xl text-left transition-all ${
                    selectedGoal === goal.id 
                      ? 'bg-orange-500 text-white' 
                      : 'bg-white border-2 border-slate-200 hover:border-orange-300'
                  }`}
                >
                  <div className="flex items-center space-x-3">
                    <span className="text-2xl">{goal.emoji}</span>
                    <div>
                      <div className="font-semibold">{goal.title}</div>
                      <div className="text-sm opacity-80">{goal.desc}</div>
                    </div>
                  </div>
                </button>
              ))}
            </div>
          </div>
        );

      case 3:
        return (
          <div className="space-y-6">
            <div className="text-center">
              <h2 className="text-3xl font-bold text-slate-800 mb-2">‡§Ö‡§™‡§®‡•á ‡§ó‡•Ç‡§ú‡§º ‡§ï‡§æ ‡§ü‡•ã‡§® ‡§ö‡•Å‡§®‡•á‡§Ç</h2>
              <p className="text-slate-600">‡§Æ‡•Å‡§ù‡•á ‡§Ü‡§™‡§∏‡•á ‡§ï‡•à‡§∏‡•á ‡§¨‡§æ‡§§ ‡§ï‡§∞‡§®‡•Ä ‡§ö‡§æ‡§π‡§ø‡§è?</p>
            </div>
            
            <div className="space-y-3">
              {tones.map((tone) => (
                <button
                  key={tone.id}
                  onClick={() => setSelectedTone(tone.id)}
                  className={`w-full p-4 rounded-2xl text-left transition-all ${
                    selectedTone === tone.id 
                      ? 'bg-orange-500 text-white' 
                      : 'bg-white border-2 border-slate-200 hover:border-orange-300'
                  }`}
                >
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-3">
                      <span className="text-2xl">{tone.emoji}</span>
                      <div>
                        <div className="font-semibold">{tone.title}</div>
                        <div className="text-sm opacity-80">{tone.desc}</div>
                      </div>
                    </div>
                    <Volume2 className="w-4 h-4 opacity-60" />
                  </div>
                </button>
              ))}
            </div>
          </div>
        );

      case 4:
        return (
          <div className="text-center space-y-6">
            <DuckMascot className="mx-auto" />
            <div>
              <h2 className="text-3xl font-bold text-slate-800 mb-4">‡§∏‡§≠‡•Ä ‡§§‡•à‡§Ø‡§æ‡§∞!</h2>
              <p className="text-slate-600 mb-4">
                ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•ã {selectedLanguage === "hi" ? "‡§π‡§ø‡§Ç‡§¶‡•Ä" : selectedLanguage.toUpperCase()} ‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏ ‡§∏‡§§‡•ç‡§∞‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è {selectedTone} ‡§µ‡§æ‡§á‡§¨ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§ï‡•â‡§≤ ‡§ï‡§∞‡•Ç‡§Ç‡§ó‡§æ‡•§
              </p>
              <div className="bg-orange-50 p-4 rounded-2xl text-left">
                <p className="text-sm text-slate-600 mb-2">‡§®‡§Æ‡•Ç‡§®‡§æ ‡§™‡§∞‡§ø‡§¶‡•É‡§∂‡•ç‡§Ø:</p>
                <p className="font-medium text-slate-800">"‡§Ü‡§á‡§è ‡§∞‡•ã‡§Æ ‡§Æ‡•á‡§Ç ‡§°‡§ï‡•à‡§§‡•Ä ‡§ï‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§¨‡§®‡§æ‡§§‡•á ‡§π‡•à‡§Ç... ‡§≤‡•á‡§ï‡§ø‡§® ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç!"</p>
              </div>
            </div>
            <Button 
              onClick={nextStep}
              className="w-full bg-orange-500 hover:bg-orange-600 text-white font-bold py-4 px-6 rounded-2xl text-xl"
            >
              ‡§∏‡•Ä‡§ñ‡§®‡§æ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç!
            </Button>
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <div className="bg-white p-8 rounded-3xl shadow-lg w-full h-full flex flex-col">
      <div className="flex-1 flex items-center justify-center">
        <div className="w-full max-w-sm">
          {renderStep()}
        </div>
      </div>
      
      {currentStep > 0 && currentStep < 4 && (
        <div className="flex justify-between items-center pt-4 border-t border-slate-100">
          <Button 
            variant="ghost"
            onClick={prevStep}
            className="text-slate-400 hover:text-slate-600"
          >
            <ChevronLeft className="w-4 h-4 mr-1" /> ‡§µ‡§æ‡§™‡§∏
          </Button>
          
          <div className="flex space-x-2">
            {[0, 1, 2, 3, 4].map((step) => (
              <div
                key={step}
                className={`w-2 h-2 rounded-full ${
                  step <= currentStep ? 'bg-orange-500' : 'bg-slate-200'
                }`}
              />
            ))}
          </div>
          
          <Button 
            onClick={nextStep}
            disabled={
              (currentStep === 1 && !selectedLanguage) ||
              (currentStep === 2 && !selectedGoal) ||
              (currentStep === 3 && !selectedTone)
            }
            className="bg-orange-500 hover:bg-orange-600 text-white px-4 py-2 rounded-xl disabled:opacity-50"
          >
            ‡§Ü‡§ó‡•á <ChevronRight className="w-4 h-4 ml-1" />
          </Button>
        </div>
      )}
    </div>
  );
};

export default OnboardingFlow;
